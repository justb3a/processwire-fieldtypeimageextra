<?php

/**
 * ProcessWire Fieldtype Image Extra
 *
 * See README.md for usage instructions.
 *
 * ProcessWire 2.x
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 *
 * @author Ryan Cramer
 * @author Tabea David <td@kf-interactive.com>
 * @version 1.0.1
 * @copyright Copyright (c) 2014 KF Interactive, www.kf-interactive.com, <info@kf-interactive.com>
 * @see https://github.com/justonestep/processwire-fieldtypeimageextra
 * @see http://www.processwire.com
 * @see http://www.ryancramer.com
 *
 */

/**
 * Class FieldtypeImageExtra
 */
class FieldtypeImageExtra extends FieldtypeImage {

  /**
   * dbFields array // cache
   *
   */
  protected $dbFields = array();

  /**
   * Retrieves module meta data
   * Implementation of the Module interface
   *
   * @return array
   * @see http://processwire.com/apigen/class-Module.html
   */
  public static function getModuleInfo() {
    return array(
      'title' => 'Images Extra Fieldtype',
      'version' => 101,
      'summary' => 'Field that stores one or more GIF, JPG, or PNG images with additional meta informations',
      'href' => 'https://github.com/justonestep/processwire-fieldtypeimageextra',
    );
  }

  /**
   * init
   *
   */
  public function init() {
    $this->defaultInputfieldClass = 'InputfieldImageExtra';
  }

  /**
   * Return the DB schema used by this field's table
   *
   * @param Field $field
   */
  public function getDatabaseSchema(Field $field) {
    $schema = parent::getDatabaseSchema($field);

    foreach ($this->getBasicFields() as $field => $fieldSchema) {
      if ($field === 'description') {
        unset($schema['description']);
      }

      $schema[$field] = $fieldSchema;

      if ($field != 'link') {
        $schema['keys'][$field] = 'FULLTEXT KEY ' . $field . '(' . $field . ')';
      }
    }

    return $schema;
  }

  /**
   * getBasicFields - get basic fields and their database schema
   *
   */
  public function getBasicFields() {
    $settings = $this->modules->get('InputfieldImageExtra')->data;

    $basicFields = array();
    $settingFields = array('title', 'description', 'orientation', 'link', 'other');
    foreach ($settingFields as $name) {
      if (!empty($settings[$name . 'Field'])) {
        switch ($name) {
          case 'title':
            $basicFields[$name] = 'varchar(1024) NOT NULL';
            break;

          case 'description':
            $basicFields[$name] = 'text NOT NULL';
            break;

          case 'orientation':
            $basicFields[$name] = 'varchar(255) NOT NULL';
            break;

          case 'link':
            $basicFields[$name] = 'int(11) NOT NULL';
            break;

          case 'other':
            foreach (explode(',', $settings[$name . 'Field']) as $otherField) {
              $basicFields[$otherField] = 'varchar(1024) NOT NULL';
            }
            break;
        }
      }
    }

    return $basicFields;
  }

  /**
   * Perform output formatting on the value delivered to the API
   * Entity encode the file's description field.
   * If the maxFiles setting is 1, then we format the value to dereference as single Pagefile rather than a PagefilesArray
   * This methos is only used when $page->outputFormatting is true.
   *
   * @param Page $page
   * @param Field $field
   * @param string|int|array $value
   */
  public function formatValue(Page $page, Field $field, $value) {
    if (!$value instanceof Pagefiles) return $value;

    // make sure fields are formatted for output
    if ($field->entityEncode) {
      $dbFields = $this->getDatabaseFields($field);

      foreach ($value as $k => $v) {
        foreach ($dbFields as $name => $type) {
          $v->set($name, htmlspecialchars($v->$name, ENT_QUOTES, "UTF-8"));
        }
      }
    }

    // if field is configured to only hold one file, then make it be just that file
    // rather than an Pageimages array
    if ($field->maxFiles == 1) {
      if (count($value)) $value = $value->first();
        else $value = null;
    }

    return $value;
  }


  /**
   * Given a raw value (value as stored in DB), return the value as it would appear in a Page object
   *
   * @param Page $page
   * @param Field $field
   * @param string|int|array $value
   * @return string|int|array|object $value
   *
   */
  public function ___wakeupValue(Page $page, Field $field, $value) {
    $pagefiles = parent::___wakeupValue($page, $field, $value);
    $dbFields = $this->getDatabaseFields($field);

    foreach ($pagefiles as $pagefile) {
      foreach ($value as $v) {
        if ($v['data'] != $pagefile->basename) continue;
        foreach ($dbFields as $name => $type) {
          $pagefile->set($name, $v[$name]);

          // fill title by default if empty
          if ($name === 'title' && empty($v[$name])) {
            $defaultTitle = basename($pagefile->basename, '.' . $pagefile->ext());
            $pagefile->set($name, $defaultTitle);
          }
        }
      }
    }

    $pagefiles->resetTrackChanges(true);

    return $pagefiles;
  }

  /**
   * Given an 'awake' value, as set by wakeupValue, convert the value back to a basic type for storage in DB.
   *
   * @param Page $page
   * @param Field $field
   * @param string|int|array|object $value
   * @return string|int
   *
   */
  public function ___sleepValue(Page $page, Field $field, $value) {
    $sleepValue = array();
    if (!$value instanceof Pagefiles) return $sleepValue;
    $dbFields = $this->getDatabaseFields($field);
    foreach ($value as $pagefile) {
      $v = array('data' => $pagefile->basename);
      foreach ($dbFields as $name => $type) {
        $this->message($name . ": " .  $pagefile->$name);
        $v[$name] = $pagefile->$name;
      }

      $sleepValue[] = $v;
    }

    return $sleepValue;
  }

  /**
   * Return array of 'name' => 'type'
   *
   * @param Field $field
   */
  public function getDatabaseFields(Field $field) {
    // check cache and return it if there
    if (!empty($this->dbFields[$field->name])) return $this->dbFields[$field->name];

    $dbFields = array();
    $schema = $this->getDatabaseSchema($field);

    foreach ($schema as $name => $value) {
      // skip the native fields, leaving ony the custom ones
      if (in_array($name, array('pages_id', 'data', 'sort', 'keys'))) continue;

      if (stripos($value, 'text ') === 0) $type = 'textarea';
        else if (stripos($value, 'varchar') === 0) $type = 'text';
        else if (stripos($value, 'int') === 0) $type = 'int';
        else continue; // skip over any we don't support

      $dbFields[$name] = $type;
    }

    $this->dbFields[$field->name] = $dbFields;

    return $dbFields;
  }

  /**
   * Return the Inputfield that handles this Fieldtype's admin input
   *
   * @param Page $page
   * @param Field $field
   */
  public function getInputfield(Page $page, Field $field) {
    $inputfield = parent::getInputfield($page, $field);

    if ($inputfield instanceof InputfieldImageExtra) {
      $dbFields = $this->getDatabaseFields($field);
      foreach ($dbFields as $name => $type) {
        $inputfield->addCustomField($type, $name, ucfirst($name));
      }
    }

    return $inputfield;
  }

  /**
   * install - install module InputfieldImageExtra as well
   *
   */
  public function ___install() {
    $module = 'InputfieldImageExtra';
    $data = array(
      'orientationField' => true,
      'orientationValues' => 'left,right',
      'titleField' => true,
      'descriptionField' => true,
      'linkField' => true,
      'otherField' => ''
    );

    $this->modules->get($module);
    $this->modules->saveModuleConfigData($module, $data);
  }

}
