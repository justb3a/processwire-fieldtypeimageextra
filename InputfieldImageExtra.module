<?php

/**
 * ProcessWire Inputfield Image Extra
 *
 * See README.md for usage instructions.
 *
 * ProcessWire 2.x
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 *
 * @author Ryan Cramer, Tabea David <info@justonestep.de>
 * @version 1.0.0
 * @copyright Copyright (c) 2014
 * @see https://github.com/justonestep/processwire-fieldtypeimageextra
 * @see http://www.processwire.com
 * @see http://www.ryancramer.com
 *
 */

/**
 * Class InputfieldImageExtra
 */
class InputfieldImageExtra extends InputfieldImage {

	protected $customFields = array(
		/* example:
		'description' => array(
			'type' => 'text',
			'label' => 'Image Description',
			)
		*/
		);

	public static function getModuleInfo() {
		return array(
			'title' => 'Images Extra Inputfield',
			'version' => 100,
			'summary' => 'One or more image uploads (sortable) with extra fields',
		);
	}

	public function init() {
		parent::init();
	}

	public function addCustomField($type, $name, $label) {
		$this->customFields[] = array(
			'name' => $name,
			'type' => $type,
			'label' => $label
		);
	}

	public function ___render() {
		$this->config->scripts->add($this->config->urls->InputfieldFile . "InputfieldFile.js");
		$this->config->scripts->add($this->config->urls->InputfieldImage . "InputfieldImage.js");
		$this->config->styles->add($this->config->urls->InputfieldFile . "InputfieldFile.css");
		$this->config->styles->add($this->config->urls->InputfieldImage . "InputfieldImage.css");
		return parent::___render();
	}

	protected function renderItemDescriptionField(Pagefile $pagefile, $id, $n) {
		$out = '';

		foreach ($this->customFields as $customField) {
			$name = $customField['name'];
			$type = $name === 'orientation' ? 'select' : $customField['type'];
			$label = $customField['label'];
			$for = $name . "_" . $id;

			switch($type) {

				case "int" :
					$value = (int) $pagefile->$name;

					$field = $this->modules->get('InputfieldPageListSelect');
					$field->startLabel = $this->_('Choose Link');
					$field->setAttribute('name+id', $for);
					$field->attr('value', $value);
					$out .= $field->render();

				break;

				case "text":
				case "textarea":
					$value = htmlspecialchars($pagefile->$name, ENT_QUOTES, "UTF-8");
					$out .= "<label class='InputfieldFileDescription infield'>$label";

					if($type == 'textarea')
						$out .= "<textarea id='$for' name='$for' rows='{$this->descriptionRows}'>$value</textarea>";
					else
						$out .= "<input type='text' name='$for' id='$for' value='$value' />";
					$out .= "</label><br />";

				break;

				// just for select field orientation
				case 'select':
					$value = $pagefile->$name;

					$out .= "<label class='infield'>$label</label>";
					$out .= "<select name='$for' size='1'>";

					foreach (array('left', 'center', 'right') as $type) {
						$selected = $value === $type ? 'selected' : '';
						$out .= "<option value='$type' $selected>$type</option>";
					}

					$out .= "</select><br /><br />";

				break;
			}
		}

		return $out;
	}

	protected function ___processInputFile(WireInputData $input, Pagefile $pagefile, $n) {
		$changed = parent::___processInputFile($input, $pagefile, $n);
		$id = $this->name . '_' . $pagefile->hash;

		foreach($this->customFields as $customField) {

			$name = $customField['name'];
			$type = $customField['type'];
			$for = $name . "_" . $id;
			$value = $input->$for;

			if ($type == 'textarea') $value = $this->sanitizer->textarea($value);
				else $value = $this->sanitizer->text($value);

			if ($pagefile->$name != $value) {
				$pagefile->set($name, $value);
				$changed = true;
			}
		}

		return $changed;
	}

}
