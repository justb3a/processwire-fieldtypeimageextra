<?php

/**
 * ProcessWire Inputfield Image Extra
 *
 * See README.md for usage instructions.
 *
 * ProcessWire 2.x
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 *
 * @author Ryan Cramer, Tabea David <info@justonestep.de>
 * @version 1.0.0
 * @copyright Copyright (c) 2014
 * @see https://github.com/justonestep/processwire-fieldtypeimageextra
 * @see http://www.processwire.com
 * @see http://www.ryancramer.com
 *
 */

/**
 * Class InputfieldImageExtra
 */
class InputfieldImageExtra extends InputfieldImage implements ConfigurableModule {

  /**
   * @field array Default config values
   *
   */
  protected static $defaults = array(
    'orientationField' => true,
    'orientationValues' => 'left,right',
    'titleField' => true,
    'descriptionField' => true,
    'linkField' => true
  );


  /**
   * Retrieves module meta data
   *
   * Implementation of the Module interface
   *
   * @return array
   * @see http://processwire.com/apigen/class-Module.html
   */
  public static function getModuleInfo() {
    return array(
      'title' => 'Images Extra Inputfield',
      'version' => 100,
      'summary' => 'One or more image uploads (sortable) with extra fields',
      'href' => 'https://github.com/justonestep/processwire-fieldtypeimageextra',
    );
  }

  /**
   * Retrieves the list of config input fields
   *
   * Implementation of the ConfigurableModule interface
   *
   * @param array $data The config data
   * @return InputfieldWrapper
   * @see http://processwire.com/apigen/class-ConfigurableModule.html
   */
  public static function getModuleConfigInputfields(array $data) {
    $fields = new InputfieldWrapper();
    $modules = wire('modules');

    // default config values
    $data = array_merge(self::$defaults, $data);

    $settings = array(
      'orientationField' => array(
        'type' => 'InputfieldCheckbox',
        'description' => 'Enable Image Orientation Select Field' . PHP_EOL . '(activate the checkbox to enable field `orientation`)',
        'checked' => empty($data['orientationField']) ? '' : 'checked',
        'columnWidth' => 25
      ),
      'orientationValues' => array(
      'type' => 'InputfieldText',
      'description' => 'Values for Image Orientation Select Field' . PHP_EOL . '(comma-separated list)',
      'size' => 45,
        'placeholder' => 'left,right',
        'columnWidth' => 25
      ),
      'titleField' => array(
        'type' => 'InputfieldCheckbox',
        'description' => 'Enable Title Input Field' . PHP_EOL . '(activate the checkbox to enable field `title`)',
        'checked' => empty($data['titleField']) ? '' : 'checked',
        'columnWidth' => 50
      ),
      'descriptionField' => array(
        'type' => 'InputfieldCheckbox',
        'description' => 'Enable Description Text Field' . PHP_EOL . '(activate the checkbox to enable field `description`)',
        'checked' => empty($data['descriptionField']) ? '' : 'checked',
        'columnWidth' => 50
      ),
      'linkField' => array(
        'type' => 'InputfieldCheckbox',
        'description' => 'Enable Choose-Link Field' . PHP_EOL . '(activate the checkbox to enable field `link`)',
        'checked' => empty($data['linkField']) ? '' : 'checked',
        'columnWidth' => 50
      ),
    );

    // assign fields
    foreach ($settings as $name => $s) {
      $field = $modules->get($s['type']);
      $field->name = $name;
      $field->label = $name;
      $field->value = $data[$name];

      foreach ($s as $key => $val) {
        if ($key != 'type') {
          $field->{$key} = $val;
        }
      }

      $fields->append($field);
    }

    return $fields;
  }

  /**
   * customfields array , that we use to hold our submitted customfields
   *
   */
  protected $customFields = array();

  /**
   * init
   *
   */
  public function init() {
    parent::init();
  }

  /**
   * addCustomField - add custom field
   *
   * @param string $type
   * @param string $name
   * @param string $label
   */
  public function addCustomField($type, $name, $label) {
    $this->customFields[] = array(
      'name' => $name,
      'type' => $type,
      'label' => $label
    );
  }

  /**
   * render - add respectively css and js
   *
   */
  public function ___render() {
    foreach (array('InputfieldFile', 'InputfieldImage') as $item) {
      foreach (array('scripts' => '.js', 'styles' => '.css') as $type => $fileExtension) {
        $this->config->{$type}->add($this->config->urls->{$item} . $item . $fileExtension);
      }
    }

    return parent::___render();
  }

  /**
   * renderItemDescriptionField - build html structure for the backend
   *
   * @param Pagefile $pagefile
   * @param string $id
   * @param int $n
   */
  protected function renderItemDescriptionField(Pagefile $pagefile, $id, $n) {
    $out = '';

    foreach ($this->customFields as $field) {
      $for = $field['name'] . '_' . $id;
      $label = ucfirst($field['label']);
      $name = $field['name'];

      if (empty($this->data[$name . 'Field'])) {
        continue;
      }

      switch ($field['name']) {

        case 'orientation':
          $out .= "<label for='$for' class='infield'>$label</label>";
          $out .= "<select name='$for' size='1'>";

          foreach (explode(',', $this->data['orientationValues']) as $type) {
            $selected = $pagefile->{$field['name']} === $type ? 'selected' : '';
            $out .= "<option value='$type' $selected>$type</option>";
          }

          $out .= "</select><br /><br />";
        break;

        case 'title':
          $value = htmlspecialchars($pagefile->{$field['name']}, ENT_QUOTES, "UTF-8");
          $out .= "<label for='$for' class='InputfieldFileDescription infield'>$label";
          $out .= "<input type='text' name='$for' id='$for' value='$value' />";
          $out .= "</label><br />";
        break;

        case 'description':
          $value = htmlspecialchars($pagefile->{$field['name']}, ENT_QUOTES, "UTF-8");
          $out .= "<label for='$for' class='InputfieldFileDescription infield'>$label";
          $out .= "<textarea id='$for' name='$for' rows='{$this->descriptionRows}'>$value</textarea>";
          $out .= "</label><br />";
        break;

        case 'link':
          $value = (int)$pagefile->$name;

          $field = $this->modules->get('InputfieldPageListSelect');
          $field->startLabel = $this->_('Choose Link');
          $field->setAttribute('name+id', $for);
          $field->attr('value', $value);
          $out .= $field->render();
        break;
      }
    }

    return $out;
  }

  /**
   * processInputFile - check changed values
   *
   * @param WireInputData $input
   * @param Pagefile $pagefile
   * @param int $n
   */
  protected function ___processInputFile(WireInputData $input, Pagefile $pagefile, $n) {
    $changed = parent::___processInputFile($input, $pagefile, $n);
    $id = $this->name . '_' . $pagefile->hash;

    foreach($this->customFields as $customField) {
      $name = $customField['name'];
      $type = $customField['type'];
      $for = $name . "_" . $id;
      $value = $input->$for;

      $value = ($type === 'textarea') ? $this->sanitizer->textarea($value) : $this->sanitizer->text($value);

      if ($pagefile->$name != $value) {
        $pagefile->set($name, $value);
        $changed = true;
      }
    }

    return $changed;
  }

}
